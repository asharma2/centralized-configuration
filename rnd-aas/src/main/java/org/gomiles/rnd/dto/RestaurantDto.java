/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.gomiles.rnd.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RestaurantDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5044999230641911819L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RestaurantDto\",\"namespace\":\"org.gomiles.rnd.dto\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name\"},{\"name\":\"city\",\"type\":\"string\",\"doc\":\"City\"},{\"name\":\"state\",\"type\":\"string\",\"doc\":\"State\"},{\"name\":\"country\",\"type\":\"string\",\"doc\":\"Country\"},{\"name\":\"postalCode\",\"type\":\"int\",\"doc\":\"Postal Code\"},{\"name\":\"contacts\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ContactDto\",\"fields\":[{\"name\":\"contact\",\"type\":\"string\",\"doc\":\"Contact Number\"},{\"name\":\"type\",\"type\":\"string\",\"doc\":\"Home or Work\"}],\"version\":\"1\"}}},{\"name\":\"position\",\"type\":{\"type\":\"record\",\"name\":\"PositionDto\",\"fields\":[{\"name\":\"lat\",\"type\":\"double\",\"doc\":\"Latitude\"},{\"name\":\"lon\",\"type\":\"double\",\"doc\":\"Longitude\"}],\"version\":\"1\"}}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RestaurantDto> ENCODER =
      new BinaryMessageEncoder<RestaurantDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RestaurantDto> DECODER =
      new BinaryMessageDecoder<RestaurantDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RestaurantDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RestaurantDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RestaurantDto>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RestaurantDto to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RestaurantDto from a ByteBuffer. */
  public static RestaurantDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Name */
  @Deprecated public java.lang.CharSequence name;
  /** City */
  @Deprecated public java.lang.CharSequence city;
  /** State */
  @Deprecated public java.lang.CharSequence state;
  /** Country */
  @Deprecated public java.lang.CharSequence country;
  /** Postal Code */
  @Deprecated public int postalCode;
  @Deprecated public java.util.List<org.gomiles.rnd.dto.ContactDto> contacts;
  @Deprecated public org.gomiles.rnd.dto.PositionDto position;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RestaurantDto() {}

  /**
   * All-args constructor.
   * @param name Name
   * @param city City
   * @param state State
   * @param country Country
   * @param postalCode Postal Code
   * @param contacts The new value for contacts
   * @param position The new value for position
   */
  public RestaurantDto(java.lang.CharSequence name, java.lang.CharSequence city, java.lang.CharSequence state, java.lang.CharSequence country, java.lang.Integer postalCode, java.util.List<org.gomiles.rnd.dto.ContactDto> contacts, org.gomiles.rnd.dto.PositionDto position) {
    this.name = name;
    this.city = city;
    this.state = state;
    this.country = country;
    this.postalCode = postalCode;
    this.contacts = contacts;
    this.position = position;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return city;
    case 2: return state;
    case 3: return country;
    case 4: return postalCode;
    case 5: return contacts;
    case 6: return position;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: city = (java.lang.CharSequence)value$; break;
    case 2: state = (java.lang.CharSequence)value$; break;
    case 3: country = (java.lang.CharSequence)value$; break;
    case 4: postalCode = (java.lang.Integer)value$; break;
    case 5: contacts = (java.util.List<org.gomiles.rnd.dto.ContactDto>)value$; break;
    case 6: position = (org.gomiles.rnd.dto.PositionDto)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Name
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return City
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * City
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return State
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * State
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return Country
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * Country
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'postalCode' field.
   * @return Postal Code
   */
  public java.lang.Integer getPostalCode() {
    return postalCode;
  }

  /**
   * Sets the value of the 'postalCode' field.
   * Postal Code
   * @param value the value to set.
   */
  public void setPostalCode(java.lang.Integer value) {
    this.postalCode = value;
  }

  /**
   * Gets the value of the 'contacts' field.
   * @return The value of the 'contacts' field.
   */
  public java.util.List<org.gomiles.rnd.dto.ContactDto> getContacts() {
    return contacts;
  }

  /**
   * Sets the value of the 'contacts' field.
   * @param value the value to set.
   */
  public void setContacts(java.util.List<org.gomiles.rnd.dto.ContactDto> value) {
    this.contacts = value;
  }

  /**
   * Gets the value of the 'position' field.
   * @return The value of the 'position' field.
   */
  public org.gomiles.rnd.dto.PositionDto getPosition() {
    return position;
  }

  /**
   * Sets the value of the 'position' field.
   * @param value the value to set.
   */
  public void setPosition(org.gomiles.rnd.dto.PositionDto value) {
    this.position = value;
  }

  /**
   * Creates a new RestaurantDto RecordBuilder.
   * @return A new RestaurantDto RecordBuilder
   */
  public static org.gomiles.rnd.dto.RestaurantDto.Builder newBuilder() {
    return new org.gomiles.rnd.dto.RestaurantDto.Builder();
  }

  /**
   * Creates a new RestaurantDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RestaurantDto RecordBuilder
   */
  public static org.gomiles.rnd.dto.RestaurantDto.Builder newBuilder(org.gomiles.rnd.dto.RestaurantDto.Builder other) {
    return new org.gomiles.rnd.dto.RestaurantDto.Builder(other);
  }

  /**
   * Creates a new RestaurantDto RecordBuilder by copying an existing RestaurantDto instance.
   * @param other The existing instance to copy.
   * @return A new RestaurantDto RecordBuilder
   */
  public static org.gomiles.rnd.dto.RestaurantDto.Builder newBuilder(org.gomiles.rnd.dto.RestaurantDto other) {
    return new org.gomiles.rnd.dto.RestaurantDto.Builder(other);
  }

  /**
   * RecordBuilder for RestaurantDto instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RestaurantDto>
    implements org.apache.avro.data.RecordBuilder<RestaurantDto> {

    /** Name */
    private java.lang.CharSequence name;
    /** City */
    private java.lang.CharSequence city;
    /** State */
    private java.lang.CharSequence state;
    /** Country */
    private java.lang.CharSequence country;
    /** Postal Code */
    private int postalCode;
    private java.util.List<org.gomiles.rnd.dto.ContactDto> contacts;
    private org.gomiles.rnd.dto.PositionDto position;
    private org.gomiles.rnd.dto.PositionDto.Builder positionBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.gomiles.rnd.dto.RestaurantDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.state)) {
        this.state = data().deepCopy(fields()[2].schema(), other.state);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.country)) {
        this.country = data().deepCopy(fields()[3].schema(), other.country);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.postalCode)) {
        this.postalCode = data().deepCopy(fields()[4].schema(), other.postalCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.contacts)) {
        this.contacts = data().deepCopy(fields()[5].schema(), other.contacts);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.position)) {
        this.position = data().deepCopy(fields()[6].schema(), other.position);
        fieldSetFlags()[6] = true;
      }
      if (other.hasPositionBuilder()) {
        this.positionBuilder = org.gomiles.rnd.dto.PositionDto.newBuilder(other.getPositionBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing RestaurantDto instance
     * @param other The existing instance to copy.
     */
    private Builder(org.gomiles.rnd.dto.RestaurantDto other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.state)) {
        this.state = data().deepCopy(fields()[2].schema(), other.state);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.country)) {
        this.country = data().deepCopy(fields()[3].schema(), other.country);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.postalCode)) {
        this.postalCode = data().deepCopy(fields()[4].schema(), other.postalCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.contacts)) {
        this.contacts = data().deepCopy(fields()[5].schema(), other.contacts);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.position)) {
        this.position = data().deepCopy(fields()[6].schema(), other.position);
        fieldSetFlags()[6] = true;
      }
      this.positionBuilder = null;
    }

    /**
      * Gets the value of the 'name' field.
      * Name
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Name
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * City
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }

    /**
      * Sets the value of the 'city' field.
      * City
      * @param value The value of 'city'.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.city = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * City
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'city' field.
      * City
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder clearCity() {
      city = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * State
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * State
      * @param value The value of 'state'.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder setState(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.state = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * State
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'state' field.
      * State
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder clearState() {
      state = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * Country
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * Country
      * @param value The value of 'country'.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.country = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * Country
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'country' field.
      * Country
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder clearCountry() {
      country = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'postalCode' field.
      * Postal Code
      * @return The value.
      */
    public java.lang.Integer getPostalCode() {
      return postalCode;
    }

    /**
      * Sets the value of the 'postalCode' field.
      * Postal Code
      * @param value The value of 'postalCode'.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder setPostalCode(int value) {
      validate(fields()[4], value);
      this.postalCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'postalCode' field has been set.
      * Postal Code
      * @return True if the 'postalCode' field has been set, false otherwise.
      */
    public boolean hasPostalCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'postalCode' field.
      * Postal Code
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder clearPostalCode() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'contacts' field.
      * @return The value.
      */
    public java.util.List<org.gomiles.rnd.dto.ContactDto> getContacts() {
      return contacts;
    }

    /**
      * Sets the value of the 'contacts' field.
      * @param value The value of 'contacts'.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder setContacts(java.util.List<org.gomiles.rnd.dto.ContactDto> value) {
      validate(fields()[5], value);
      this.contacts = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'contacts' field has been set.
      * @return True if the 'contacts' field has been set, false otherwise.
      */
    public boolean hasContacts() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'contacts' field.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder clearContacts() {
      contacts = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'position' field.
      * @return The value.
      */
    public org.gomiles.rnd.dto.PositionDto getPosition() {
      return position;
    }

    /**
      * Sets the value of the 'position' field.
      * @param value The value of 'position'.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder setPosition(org.gomiles.rnd.dto.PositionDto value) {
      validate(fields()[6], value);
      this.positionBuilder = null;
      this.position = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'position' field has been set.
      * @return True if the 'position' field has been set, false otherwise.
      */
    public boolean hasPosition() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'position' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.gomiles.rnd.dto.PositionDto.Builder getPositionBuilder() {
      if (positionBuilder == null) {
        if (hasPosition()) {
          setPositionBuilder(org.gomiles.rnd.dto.PositionDto.newBuilder(position));
        } else {
          setPositionBuilder(org.gomiles.rnd.dto.PositionDto.newBuilder());
        }
      }
      return positionBuilder;
    }

    /**
     * Sets the Builder instance for the 'position' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.gomiles.rnd.dto.RestaurantDto.Builder setPositionBuilder(org.gomiles.rnd.dto.PositionDto.Builder value) {
      clearPosition();
      positionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'position' field has an active Builder instance
     * @return True if the 'position' field has an active Builder instance
     */
    public boolean hasPositionBuilder() {
      return positionBuilder != null;
    }

    /**
      * Clears the value of the 'position' field.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.RestaurantDto.Builder clearPosition() {
      position = null;
      positionBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RestaurantDto build() {
      try {
        RestaurantDto record = new RestaurantDto();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.city = fieldSetFlags()[1] ? this.city : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.state = fieldSetFlags()[2] ? this.state : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.country = fieldSetFlags()[3] ? this.country : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.postalCode = fieldSetFlags()[4] ? this.postalCode : (java.lang.Integer) defaultValue(fields()[4]);
        record.contacts = fieldSetFlags()[5] ? this.contacts : (java.util.List<org.gomiles.rnd.dto.ContactDto>) defaultValue(fields()[5]);
        if (positionBuilder != null) {
          record.position = this.positionBuilder.build();
        } else {
          record.position = fieldSetFlags()[6] ? this.position : (org.gomiles.rnd.dto.PositionDto) defaultValue(fields()[6]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RestaurantDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<RestaurantDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RestaurantDto>
    READER$ = (org.apache.avro.io.DatumReader<RestaurantDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
