/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.gomiles.rnd.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PositionDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5242020987523484845L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PositionDto\",\"namespace\":\"org.gomiles.rnd.dto\",\"fields\":[{\"name\":\"lat\",\"type\":\"double\",\"doc\":\"Latitude\"},{\"name\":\"lon\",\"type\":\"double\",\"doc\":\"Longitude\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PositionDto> ENCODER =
      new BinaryMessageEncoder<PositionDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PositionDto> DECODER =
      new BinaryMessageDecoder<PositionDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PositionDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PositionDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PositionDto>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PositionDto to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PositionDto from a ByteBuffer. */
  public static PositionDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Latitude */
  @Deprecated public double lat;
  /** Longitude */
  @Deprecated public double lon;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PositionDto() {}

  /**
   * All-args constructor.
   * @param lat Latitude
   * @param lon Longitude
   */
  public PositionDto(java.lang.Double lat, java.lang.Double lon) {
    this.lat = lat;
    this.lon = lon;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lat;
    case 1: return lon;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lat = (java.lang.Double)value$; break;
    case 1: lon = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'lat' field.
   * @return Latitude
   */
  public java.lang.Double getLat() {
    return lat;
  }

  /**
   * Sets the value of the 'lat' field.
   * Latitude
   * @param value the value to set.
   */
  public void setLat(java.lang.Double value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'lon' field.
   * @return Longitude
   */
  public java.lang.Double getLon() {
    return lon;
  }

  /**
   * Sets the value of the 'lon' field.
   * Longitude
   * @param value the value to set.
   */
  public void setLon(java.lang.Double value) {
    this.lon = value;
  }

  /**
   * Creates a new PositionDto RecordBuilder.
   * @return A new PositionDto RecordBuilder
   */
  public static org.gomiles.rnd.dto.PositionDto.Builder newBuilder() {
    return new org.gomiles.rnd.dto.PositionDto.Builder();
  }

  /**
   * Creates a new PositionDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PositionDto RecordBuilder
   */
  public static org.gomiles.rnd.dto.PositionDto.Builder newBuilder(org.gomiles.rnd.dto.PositionDto.Builder other) {
    return new org.gomiles.rnd.dto.PositionDto.Builder(other);
  }

  /**
   * Creates a new PositionDto RecordBuilder by copying an existing PositionDto instance.
   * @param other The existing instance to copy.
   * @return A new PositionDto RecordBuilder
   */
  public static org.gomiles.rnd.dto.PositionDto.Builder newBuilder(org.gomiles.rnd.dto.PositionDto other) {
    return new org.gomiles.rnd.dto.PositionDto.Builder(other);
  }

  /**
   * RecordBuilder for PositionDto instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PositionDto>
    implements org.apache.avro.data.RecordBuilder<PositionDto> {

    /** Latitude */
    private double lat;
    /** Longitude */
    private double lon;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.gomiles.rnd.dto.PositionDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lat)) {
        this.lat = data().deepCopy(fields()[0].schema(), other.lat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lon)) {
        this.lon = data().deepCopy(fields()[1].schema(), other.lon);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PositionDto instance
     * @param other The existing instance to copy.
     */
    private Builder(org.gomiles.rnd.dto.PositionDto other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.lat)) {
        this.lat = data().deepCopy(fields()[0].schema(), other.lat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lon)) {
        this.lon = data().deepCopy(fields()[1].schema(), other.lon);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'lat' field.
      * Latitude
      * @return The value.
      */
    public java.lang.Double getLat() {
      return lat;
    }

    /**
      * Sets the value of the 'lat' field.
      * Latitude
      * @param value The value of 'lat'.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.PositionDto.Builder setLat(double value) {
      validate(fields()[0], value);
      this.lat = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lat' field has been set.
      * Latitude
      * @return True if the 'lat' field has been set, false otherwise.
      */
    public boolean hasLat() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'lat' field.
      * Latitude
      * @return This builder.
      */
    public org.gomiles.rnd.dto.PositionDto.Builder clearLat() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lon' field.
      * Longitude
      * @return The value.
      */
    public java.lang.Double getLon() {
      return lon;
    }

    /**
      * Sets the value of the 'lon' field.
      * Longitude
      * @param value The value of 'lon'.
      * @return This builder.
      */
    public org.gomiles.rnd.dto.PositionDto.Builder setLon(double value) {
      validate(fields()[1], value);
      this.lon = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lon' field has been set.
      * Longitude
      * @return True if the 'lon' field has been set, false otherwise.
      */
    public boolean hasLon() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lon' field.
      * Longitude
      * @return This builder.
      */
    public org.gomiles.rnd.dto.PositionDto.Builder clearLon() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PositionDto build() {
      try {
        PositionDto record = new PositionDto();
        record.lat = fieldSetFlags()[0] ? this.lat : (java.lang.Double) defaultValue(fields()[0]);
        record.lon = fieldSetFlags()[1] ? this.lon : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PositionDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<PositionDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PositionDto>
    READER$ = (org.apache.avro.io.DatumReader<PositionDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
